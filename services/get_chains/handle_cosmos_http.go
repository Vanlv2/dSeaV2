package get_chains

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strconv"
	"sync"
	"time"
)

// C·∫•u tr√∫c ƒë·ªÉ l∆∞u tr·ªØ l·∫°i kh·ªëi x·ª≠ l√Ω cu·ªëi c√πng
type CosmosChainData struct {
	LastProcessedBlock int64
	Config             ConfigCosmos
	LogData            map[string]interface{}
}

var cosmosChainDataMap = make(map[string]*CosmosChainData)
var cosmosProcessLock = &sync.Mutex{}

// Kh·ªüi t·∫°o d·ªØ li·ªáu cho chu·ªói Cosmos
func InitCosmosChainData(chainName string) *CosmosChainData {
	if data, exists := cosmosChainDataMap[chainName]; exists {
		return data
	}

	data := &CosmosChainData{
		LastProcessedBlock: 0,
		LogData:            make(map[string]interface{}),
	}
	cosmosChainDataMap[chainName] = data
	return data
}

// L·∫•y d·ªØ li·ªáu chu·ªói Cosmos
func GetCosmosChainData(chainName string) *CosmosChainData {
	return cosmosChainDataMap[chainName]
}

// T·∫£i c·∫•u h√¨nh cho chu·ªói Cosmos
func load_cosmos_config(filePath string, chainName string) error {
	data, err := os.ReadFile(filePath)
	if err != nil {
		return fmt.Errorf("kh√¥ng th·ªÉ ƒë·ªçc file c·∫•u h√¨nh: %v", err)
	}

	chainData := GetCosmosChainData(chainName)
	if chainData == nil {
		return fmt.Errorf("kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho chain %s", chainName)
	}

	return json.Unmarshal(data, &chainData.Config)
}

// C·∫•u tr√∫c cho ph·∫£n h·ªìi HTTP t·ª´ Cosmos RPC
type CosmosBlockResponse struct {
	JSONRPC string `json:"jsonrpc"`
	ID      int    `json:"id"`
	Result  struct {
		BlockID struct {
			Hash  string `json:"hash"`
			Parts struct {
				Total int    `json:"total"`
				Hash  string `json:"hash"`
			} `json:"parts"`
		} `json:"block_id"`
		Block struct {
			Header struct {
				Version struct {
					Block string `json:"block"`
				} `json:"version"`
				ChainID     string    `json:"chain_id"`
				Height      string    `json:"height"`
				Time        time.Time `json:"time"`
				LastBlockID struct {
					Hash  string `json:"hash"`
					Parts struct {
						Total int    `json:"total"`
						Hash  string `json:"hash"`
					} `json:"parts"`
				} `json:"last_block_id"`
				LastCommitHash     string `json:"last_commit_hash"`
				DataHash           string `json:"data_hash"`
				ValidatorsHash     string `json:"validators_hash"`
				NextValidatorsHash string `json:"next_validators_hash"`
				ConsensusHash      string `json:"consensus_hash"`
				AppHash            string `json:"app_hash"`
				LastResultsHash    string `json:"last_results_hash"`
				EvidenceHash       string `json:"evidence_hash"`
				ProposerAddress    string `json:"proposer_address"`
			} `json:"header"`
			Data struct {
				Txs []string `json:"txs"` // Giao d·ªãch d·∫°ng base64
			} `json:"data"`
			Evidence struct {
				Evidence []interface{} `json:"evidence"`
			} `json:"evidence"`
			LastCommit struct {
				Height  string `json:"height"`
				Round   int    `json:"round"`
				BlockID struct {
					Hash  string `json:"hash"`
					Parts struct {
						Total int    `json:"total"`
						Hash  string `json:"hash"`
					} `json:"parts"`
				} `json:"block_id"`
				Signatures []struct {
					BlockIDFlag      int       `json:"block_id_flag"`
					ValidatorAddress string    `json:"validator_address"`
					Timestamp        time.Time `json:"timestamp"`
					Signature        string    `json:"signature"`
				} `json:"signatures"`
			} `json:"last_commit"`
		} `json:"block"`
	} `json:"result"`
}

// C·∫•u tr√∫c cho ph·∫£n h·ªìi TxSearch t·ª´ Cosmos RPC
type CosmosTxSearchResponse struct {
	JSONRPC string `json:"jsonrpc"`
	ID      int    `json:"id"`
	Result  struct {
		Txs []struct {
			Hash     string `json:"hash"`
			Height   string `json:"height"`
			Index    int    `json:"index"`
			TxResult struct {
				Code      int    `json:"code"`
				Data      string `json:"data"`
				Log       string `json:"log"`
				Info      string `json:"info"`
				GasWanted string `json:"gas_wanted"`
				GasUsed   string `json:"gas_used"`
				Events    []struct {
					Type       string `json:"type"`
					Attributes []struct {
						Key   string `json:"key"`
						Value string `json:"value"`
						Index bool   `json:"index"`
					} `json:"attributes"`
				} `json:"events"`
				Codespace string `json:"codespace"`
			} `json:"tx_result"`
			Tx string `json:"tx"`
		} `json:"txs"`
		TotalCount string `json:"total_count"`
	} `json:"result"`
}

// L·∫•y th√¥ng tin block t·ª´ Cosmos blockchain
func getCosmosBlock(height int64, rpcURL string) (*CosmosBlockResponse, error) {
	url := fmt.Sprintf("%s/block?height=%d", rpcURL, height)
	resp, err := http.Get(url)
	if err != nil {
		return nil, fmt.Errorf("l·ªói khi g·ªçi API Cosmos: %v", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("l·ªói khi ƒë·ªçc ph·∫£n h·ªìi: %v", err)
	}

	var blockResp CosmosBlockResponse
	if err := json.Unmarshal(body, &blockResp); err != nil {
		return nil, fmt.Errorf("l·ªói khi parse JSON: %v", err)
	}

	return &blockResp, nil
}

// L·∫•y th√¥ng tin giao d·ªãch trong m·ªôt block
func getCosmosTxsForBlock(height int64, rpcURL string) (*CosmosTxSearchResponse, error) {
	url := fmt.Sprintf("%s/tx_search?query=\"tx.height=%d\"&prove=true", rpcURL, height)
	resp, err := http.Get(url)
	if err != nil {
		return nil, fmt.Errorf("l·ªói khi g·ªçi API Cosmos ƒë·ªÉ l·∫•y giao d·ªãch: %v", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("l·ªói khi ƒë·ªçc ph·∫£n h·ªìi: %v", err)
	}

	var txResp CosmosTxSearchResponse
	if err := json.Unmarshal(body, &txResp); err != nil {
		return nil, fmt.Errorf("l·ªói khi parse JSON: %v", err)
	}

	return &txResp, nil
}

// Ghi block v√†o file log - gi·ªØ nguy√™n
func writeCosmosBlockToFile(height int64, block *CosmosBlockResponse, txCount int, chainName string) {
	filePath := fmt.Sprintf("./services/get_chains/log/block_data_cosmos_%s.log", chainName)
	file, err := os.OpenFile(filePath, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0644)
	if err != nil {
		log.Printf("Kh√¥ng th·ªÉ m·ªü file %s: %v", filePath, err)
		return
	}
	defer file.Close()

	timestamp := time.Now().Format("2006-01-02 15:04:05")
	blockData := fmt.Sprintf("[%s] Block: %d, Transactions: %d\n", timestamp, height, txCount)

	blockJSON, err := json.MarshalIndent(block, "", "  ")
	if err != nil {
		log.Printf("Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi block th√†nh JSON: %v", err)
	} else {
		blockData += string(blockJSON) + "\n----------------------------------------\n"
	}

	if _, err := file.WriteString(blockData); err != nil {
		log.Printf("Kh√¥ng th·ªÉ ghi v√†o file %s: %v", filePath, err)
	} else {
		log.Printf("ƒê√£ ghi kh·ªëi %d (%d giao d·ªãch) v√†o file cho chain %s", height, txCount, chainName)
	}
}

// Tr√≠ch xu·∫•t d·ªØ li·ªáu giao d·ªãch t·ª´ Cosmos - S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p chuy·ªÉn ƒë·ªïi JSON
func extractCosmosTransactionData(tx interface{}, chainName string, blockTime time.Time, height int64, blockHash string) TransactionRecord {
	// Ph√¢n t√≠ch d·ªØ li·ªáu giao d·ªãch theo ƒë·ªãnh d·∫°ng c·ªßa Cosmos
	txData, ok := tx.(map[string]interface{})
	if !ok {
		return TransactionRecord{}
	}

	// Tr√≠ch xu·∫•t th√¥ng tin t·ª´ giao d·ªãch Cosmos
	txHash, _ := txData["hash"].(string)

	// Tr√≠ch xu·∫•t c√°c th√¥ng tin t·ª´ events
	var from, to, amount, token, totalAmount string

	// Ki·ªÉm tra xem tx_result c√≥ t·ªìn t·∫°i kh√¥ng
	if txResult, exists := txData["tx_result"]; exists {
		// Chuy·ªÉn ƒë·ªïi struct th√†nh JSON v√† sau ƒë√≥ parse l·∫°i
		txResultBytes, err := json.Marshal(txResult)
		if err == nil {
			var txResultMap map[string]interface{}
			if json.Unmarshal(txResultBytes, &txResultMap) == nil {
				if events, hasEvents := txResultMap["events"].([]interface{}); hasEvents {
					for _, event := range events {
						eventMap, ok := event.(map[string]interface{})
						if !ok {
							continue
						}

						eventType, _ := eventMap["type"].(string)
						if eventType == "transfer" {
							attributes, hasAttr := eventMap["attributes"].([]interface{})
							if !hasAttr {
								continue
							}

							for _, attr := range attributes {
								attrMap, ok := attr.(map[string]interface{})
								if !ok {
									continue
								}

								key, _ := attrMap["key"].(string)
								value, _ := attrMap["value"].(string)

								if key == "sender" {
									from = value
								} else if key == "recipient" {
									to = value
								} else if key == "amount" {
									totalAmount = value
									amount, token = parseAmount(value)
								}
							}
						}
					}
				}
			}
		}
	}

	// T·∫°o v√† tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng TransactionRecord gi·ªëng nh∆∞ trong handle_cosmos_ws.go
	return TransactionRecord{
		BlockHeight: fmt.Sprintf("%d", height),
		BlockHash:   blockHash,
		BlockTime:   blockTime,
		ChainID:     chainName,
		TxHash:      txHash,
		From:        from,
		To:          to,
		Amount:      amount,
		Token:       token,
		TotalAmount: totalAmount,
		TxType:      "Transfer",
		Timestamp:   blockTime.Format(time.RFC3339), // Th√™m timestamp
	}
}

// X·ª≠ l√Ω m·ªôt block Cosmos - Thay ƒë·ªïi ƒë·ªÉ c√≥ c·∫•u tr√∫c log gi·ªëng ws
func processCosmosBlock(height int64, chainName string, rpcURL string) error {
	logMutex.Lock()
	log.Printf("üîç ƒêang l·∫•y th√¥ng tin kh·ªëi: %d", height)
	logMutex.Unlock()

	// L·∫•y th√¥ng tin block
	block, err := getCosmosBlock(height, rpcURL)
	if err != nil {
		logMutex.Lock()
		log.Printf("‚ùå L·ªói khi l·∫•y kh·ªëi %d: %v", height, err)
		logMutex.Unlock()
		return err
	}

	logMutex.Lock()
	log.Printf("‚úÖ ƒê√£ l·∫•y kh·ªëi: %d", height)
	logMutex.Unlock()

	// L·∫•y giao d·ªãch trong block
	txsResp, err := getCosmosTxsForBlock(height, rpcURL)
	if err != nil {
		logMutex.Lock()
		log.Printf("‚ùå L·ªói khi l·∫•y giao d·ªãch cho kh·ªëi %d: %v", height, err)
		logMutex.Unlock()
		return err
	}

	txCount := len(txsResp.Result.Txs)
	blockHeight, _ := strconv.ParseInt(block.Result.Block.Header.Height, 10, 64)
	blockTime := block.Result.Block.Header.Time
	blockHash := block.Result.BlockID.Hash

	// In th√¥ng tin block nh∆∞ trong handle_cosmos_ws.go
	logMutex.Lock()
	log.Printf("BLOCK M·ªöI #%s | Chain: %s | Time: %s | Hash: %s",
		block.Result.Block.Header.Height, block.Result.Block.Header.ChainID,
		blockTime.Format(time.RFC3339), blockHash)
	logMutex.Unlock()

	if txCount == 0 {
		logMutex.Lock()
		log.Printf("Block #%s kh√¥ng c√≥ giao d·ªãch", block.Result.Block.Header.Height)
		logMutex.Unlock()
		return nil
	}

	logMutex.Lock()
	log.Printf("S·ªë l∆∞·ª£ng giao d·ªãch trong block #%s: %d", block.Result.Block.Header.Height, txCount)
	logMutex.Unlock()

	// Ghi block v√†o file log
	writeCosmosBlockToFile(height, block, txCount, chainName)

	// T·∫°o danh s√°ch c√°c giao d·ªãch - t∆∞∆°ng t·ª± nh∆∞ trong handle_cosmos_ws.go
	var transactions []TransactionRecord

	// X·ª≠ l√Ω t·ª´ng giao d·ªãch
	for _, tx := range txsResp.Result.Txs {
		txMap := map[string]interface{}{
			"hash":      tx.Hash,
			"height":    tx.Height,
			"tx_result": tx.TxResult,
			"tx":        tx.Tx,
		}

		// Tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ transaction d∆∞·ªõi d·∫°ng TransactionRecord
		record := extractCosmosTransactionData(txMap, chainName, blockTime, blockHeight, blockHash)

		// Th√™m v√†o danh s√°ch giao d·ªãch
		if record.TxHash != "" {
			transactions = append(transactions, record)
		}
	}

	// Ghi log c√°c giao d·ªãch theo ƒë·ªãnh d·∫°ng JSON gi·ªëng nh∆∞ trong handle_cosmos_ws.go
	for _, record := range transactions {
		recordJSON, _ := json.MarshalIndent(record, "", "  ")
		logMutex.Lock()
		log.Printf("GIAO D·ªäCH TRONG BLOCK #%s:\n%s", block.Result.Block.Header.Height, string(recordJSON))
		logMutex.Unlock()
	}

	logMutex.Lock()
	log.Printf("‚úÖ Ho√†n th√†nh x·ª≠ l√Ω kh·ªëi %d", height)
	logMutex.Unlock()
	return nil
}

// X·ª≠ l√Ω c√°c block t·ª´ qu√° kh·ª© ƒë·∫øn hi·ªán t·∫°i
func continueHandleCosmosHTTP(chainName string) {
	chainData := GetCosmosChainData(chainName)
	if chainData == nil {
		log.Fatalf("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho chain %s", chainName)
	}

	// Kh·ªüi t·∫°o block b·∫Øt ƒë·∫ßu (c√≥ th·ªÉ c·∫•u h√¨nh trong file)
	startBlockNumber := int64(1)
	chainData.LastProcessedBlock = startBlockNumber - 1

	logMutex.Lock()
	log.Printf("======= KH·ªûI ƒê·ªòNG H·ªÜ TH·ªêNG CHO CHAIN COSMOS %s =======", chainName)
	log.Printf("Kh·ªüi t·∫°o lastProcessedBlock = %d", chainData.LastProcessedBlock)
	log.Printf("B·∫Øt ƒë·∫ßu qu√©t t·ª´ kh·ªëi = %d", startBlockNumber)
	log.Printf("==================================")
	logMutex.Unlock()

	blockCounter := 0
	currentBlock := startBlockNumber

	for {
		blockCounter++

		// M·ªói 50 kh·ªëi, ki·ªÉm tra xem c√≥ b·ªã b·ªè l·ª° kh·ªëi n√†o kh√¥ng
		if blockCounter%50 == 0 {
			// L·∫•y block hi·ªán t·∫°i t·ª´ API
			url := fmt.Sprintf("%s/status", chainData.Config.RPC)
			resp, err := http.Get(url)

			if err == nil {
				defer resp.Body.Close()
				body, err := io.ReadAll(resp.Body)

				if err == nil {
					var statusResp struct {
						JSONRPC string `json:"jsonrpc"`
						ID      int    `json:"id"`
						Result  struct {
							SyncInfo struct {
								LatestBlockHeight string `json:"latest_block_height"`
							} `json:"sync_info"`
						} `json:"result"`
					}

					if json.Unmarshal(body, &statusResp) == nil {
						latestBlock, err := strconv.ParseInt(statusResp.Result.SyncInfo.LatestBlockHeight, 10, 64)
						if err == nil {
							gap := latestBlock - currentBlock
							if gap > 20 {
								// C√≥ kho·∫£ng c√°ch l·ªõn, x·ª≠ l√Ω nhanh c√°c kh·ªëi b·ªã b·ªè l·ª°
								nextBatchEnd := currentBlock + 100
								if nextBatchEnd > latestBlock {
									nextBatchEnd = latestBlock
								}

								logMutex.Lock()
								log.Printf("‚ö†Ô∏è Ph√°t hi·ªán kho·∫£ng c√°ch %d kh·ªëi tr√™n chain %s. ƒêang qu√©t nhanh t·ª´ %d ƒë·∫øn %d...",
									gap, chainName, currentBlock, nextBatchEnd)
								logMutex.Unlock()

								for i := currentBlock; i <= nextBatchEnd; i++ {
									if err := processCosmosBlock(i, chainName, chainData.Config.RPC); err != nil {
										logMutex.Lock()
										log.Printf("L·ªói khi x·ª≠ l√Ω kh·ªëi %d: %v, ti·∫øp t·ª•c...", i, err)
										logMutex.Unlock()
									}
									time.Sleep(50 * time.Millisecond)
								}

								currentBlock = nextBatchEnd + 1

								cosmosProcessLock.Lock()
								chainData.LastProcessedBlock = nextBatchEnd
								cosmosProcessLock.Unlock()

								logMutex.Lock()
								log.Printf("‚úÖ ƒê√£ qu√©t nhanh ƒë·∫øn kh·ªëi %d", nextBatchEnd)
								logMutex.Unlock()
								continue
							}
						}
					}
				}
			}
		}

		// X·ª≠ l√Ω kh·ªëi ti·∫øp theo
		err := processCosmosBlock(currentBlock, chainName, chainData.Config.RPC)
		if err == nil {
			currentBlock++

			cosmosProcessLock.Lock()
			if currentBlock-1 > chainData.LastProcessedBlock {
				chainData.LastProcessedBlock = currentBlock - 1
			}
			cosmosProcessLock.Unlock()

			time.Sleep(200 * time.Millisecond)
		} else {
			sleepTime := 500 * time.Millisecond
			logMutex.Lock()
			log.Printf("ƒê·ª£i %v tr∆∞·ªõc khi th·ª≠ l·∫°i kh·ªëi %d", sleepTime, currentBlock)
			logMutex.Unlock()
			time.Sleep(sleepTime)
		}
	}
}

// X·ª≠ l√Ω c√°c block t·ª´ hi·ªán t·∫°i ng∆∞·ª£c v·ªÅ qu√° kh·ª©
func reverseHandleCosmosHTTP(chainName string, pastDuration time.Duration) {
	chainData := GetCosmosChainData(chainName)
	if chainData == nil {
		log.Fatalf("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho chain %s", chainName)
	}

	// L·∫•y block hi·ªán t·∫°i
	url := fmt.Sprintf("%s/status", chainData.Config.RPC)
	resp, err := http.Get(url)
	if err != nil {
		log.Fatalf("L·ªói khi l·∫•y tr·∫°ng th√°i chain: %v", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatalf("L·ªói khi ƒë·ªçc ph·∫£n h·ªìi: %v", err)
	}

	var statusResp struct {
		JSONRPC string `json:"jsonrpc"`
		ID      int    `json:"id"`
		Result  struct {
			SyncInfo struct {
				LatestBlockHeight string `json:"latest_block_height"`
				LatestBlockTime   string `json:"latest_block_time"`
			} `json:"sync_info"`
		} `json:"result"`
	}

	if err := json.Unmarshal(body, &statusResp); err != nil {
		log.Fatalf("L·ªói khi parse JSON: %v", err)
	}

	latestBlock, err := strconv.ParseInt(statusResp.Result.SyncInfo.LatestBlockHeight, 10, 64)
	if err != nil {
		log.Fatalf("L·ªói khi chuy·ªÉn ƒë·ªïi s·ªë kh·ªëi: %v", err)
	}

	latestBlockTime, err := time.Parse(time.RFC3339, statusResp.Result.SyncInfo.LatestBlockTime)
	if err != nil {
		latestBlockTime = time.Now()
	}

	// T√≠nh th·ªùi gian m·ª•c ti√™u
	targetTime := latestBlockTime.Add(-pastDuration)

	logMutex.Lock()
	log.Printf("======= KH·ªûI ƒê·ªòNG H·ªÜ TH·ªêNG NG∆Ø·ª¢C CHO CHAIN COSMOS %s =======", chainName)
	log.Printf("B·∫Øt ƒë·∫ßu qu√©t t·ª´ kh·ªëi hi·ªán t·∫°i = %d", latestBlock)
	log.Printf("Th·ªùi gian m·ª•c ti√™u: %v", targetTime)
	log.Printf("==================================")
	logMutex.Unlock()

	blockCounter := 0
	currentBlock := latestBlock

	for {
		blockCounter++

		// X·ª≠ l√Ω kh·ªëi hi·ªán t·∫°i
		err := processCosmosBlock(currentBlock, chainName, chainData.Config.RPC)
		if err == nil {
			// L·∫•y th√¥ng tin block ƒë·ªÉ ki·ªÉm tra ƒëi·ªÅu ki·ªán d·ª´ng
			block, err := getCosmosBlock(currentBlock, chainData.Config.RPC)
			if err == nil {
				blockTime := block.Result.Block.Header.Time

				// Ki·ªÉm tra n·∫øu ƒë√£ ƒë·∫°t ƒë·∫øn th·ªùi gian m·ª•c ti√™u
				if blockTime.Before(targetTime) || blockTime.Equal(targetTime) {
					logMutex.Lock()
					log.Printf("‚úÖ ƒê√£ ƒë·∫°t ƒë·∫øn th·ªùi gian m·ª•c ti√™u t·∫°i kh·ªëi %d", currentBlock)
					logMutex.Unlock()
					break
				}
			}

			// Gi·∫£m s·ªë block ƒë·ªÉ qu√©t ng∆∞·ª£c v·ªÅ qu√° kh·ª©
			currentBlock--

			// C·∫≠p nh·∫≠t LastProcessedBlock
			cosmosProcessLock.Lock()
			chainData.LastProcessedBlock = currentBlock + 1
			cosmosProcessLock.Unlock()

			// M·ªói 50 kh·ªëi, in th√¥ng tin ti·∫øn ƒë·ªô
			if blockCounter%50 == 0 {
				logMutex.Lock()
				log.Printf("üîÑ ƒê√£ qu√©t ng∆∞·ª£c %d kh·ªëi, hi·ªán t·∫°i ·ªü kh·ªëi %d", blockCounter, currentBlock)
				logMutex.Unlock()
			}

			time.Sleep(200 * time.Millisecond)
		} else {
			sleepTime := 500 * time.Millisecond
			logMutex.Lock()
			log.Printf("ƒê·ª£i %v tr∆∞·ªõc khi th·ª≠ l·∫°i kh·ªëi %d", sleepTime, currentBlock)
			logMutex.Unlock()
			time.Sleep(sleepTime)
		}

		// D·ª´ng khi ƒë√£ qu√©t ƒë·∫øn kh·ªëi 1
		if currentBlock <= 1 {
			logMutex.Lock()
			log.Printf("‚úÖ ƒê√£ qu√©t ƒë·∫øn kh·ªëi ƒë·∫ßu ti√™n")
			logMutex.Unlock()
			break
		}
	}

	logMutex.Lock()
	log.Printf("‚úÖ Ho√†n th√†nh x·ª≠ l√Ω c√°c block ng∆∞·ª£c cho chain %s", chainName)
	logMutex.Unlock()
}

func handle_cosmos_http() {
	chainName := "cosmos"

	// M·ªü file log gi·ªëng nh∆∞ trong handle_cosmos_ws.go
	logFile, err := os.OpenFile("./services/get_chains/log/cosmos_http.log", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0666)
	if err != nil {
		log.Fatalf("Kh√¥ng th·ªÉ m·ªü file log: %v", err)
	}
	defer logFile.Close()

	// Chuy·ªÉn h∆∞·ªõng log v√†o file
	log.SetOutput(logFile)

	// Kh·ªüi t·∫°o chainData v√† s·ª≠ d·ª•ng ngay sau khi khai b√°o
	chainData := InitCosmosChainData(chainName)
	log.Printf("Kh·ªüi t·∫°o d·ªØ li·ªáu cho chain %s, kh·ªëi cu·ªëi c√πng: %d",
		chainName, chainData.LastProcessedBlock)

	// T·∫£i c·∫•u h√¨nh
	if err := load_cosmos_config("./services/get_chains/config_chain/config-cosmos.json", chainName); err != nil {
		log.Fatalf("Kh√¥ng th·ªÉ t·∫£i c·∫•u h√¨nh: %v", err)
	}

	// X·ª≠ l√Ω c√°c kh·ªëi t·ª´ gi·ªù tr·ªü v·ªÅ 1 gi·ªù tr∆∞·ªõc
	pastDuration := 1 * time.Hour

	logMutex.Lock()
	log.Printf("======= B·∫ÆT ƒê·∫¶U QU√Å TR√åNH X·ª¨ L√ù CHAIN COSMOS %s =======", chainName)
	log.Printf("B∆∞·ªõc 1: Qu√©t ng∆∞·ª£c v·ªÅ qu√° kh·ª© (%v)", pastDuration)
	logMutex.Unlock()

	// B·∫Øt ƒë·∫ßu qu√©t ng∆∞·ª£c t·ª´ hi·ªán t·∫°i v·ªÅ qu√° kh·ª©
	reverseHandleCosmosHTTP(chainName, pastDuration)

	logMutex.Lock()
	log.Printf("B∆∞·ªõc 2: Ti·∫øp t·ª•c qu√©t t·ª´ qu√° kh·ª© ƒë·∫øn hi·ªán t·∫°i v√† theo d√µi c√°c kh·ªëi m·ªõi")
	logMutex.Unlock()

	// Sau ƒë√≥ ti·∫øp t·ª•c qu√©t t·ª´ qu√° kh·ª© ƒë·∫øn hi·ªán t·∫°i
	continueHandleCosmosHTTP(chainName)
}
