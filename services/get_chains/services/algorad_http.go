package services

import (
	"crypto/sha256"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"time"

	"main/services/get_chains/configs"
	"main/services/get_chains/model"
)

// Kh·ªüi t·∫°o d·ªØ li·ªáu cho chu·ªói Algorand
func InitAlgorandChainData(chainName string) *model.ChainDataAlgorand {
	if data, exists := model.ChainDataMapVan[chainName]; exists {
		return data.(*model.ChainDataAlgorand)
	}

	data := &model.ChainDataAlgorand{
		LastProcessedBlock: 0,
		LogData:            make(map[string]interface{}),
	}
	model.ChainDataMapVan[chainName] = data
	return data
}

// L·∫•y th√¥ng tin block t·ª´ Algorand blockchain qua API
func getAlgorandBlock(round int64, apiURL string) (*model.AlgorandBlockResponseVan, error) {
	url := fmt.Sprintf("%s/v2/blocks/%d", apiURL, round)
	resp, err := http.Get(url)
	if err != nil {
		return nil, fmt.Errorf("error calling Algorand API: %v", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("error reading response: %v", err)
	}

	var blockResp model.AlgorandBlockResponseVan
	if err := json.Unmarshal(body, &blockResp); err != nil {
		return nil, fmt.Errorf("error parsing JSON: %v", err)
	}

	return &blockResp, nil
}

// L·∫•y giao d·ªãch t·ª´ block b·∫±ng Indexer API
func getAlgorandTransactions(round int64, indexerURL string) ([]model.AlgorandTransactionVan, error) {
	url := fmt.Sprintf("%s/v2/transactions?min-round=%d&max-round=%d", indexerURL, round, round)
	resp, err := http.Get(url)
	if err != nil {
		return nil, fmt.Errorf("error fetching transactions: %v", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("error reading transactions response: %v", err)
	}

	log.Printf("Raw transactions response for round %d: %s", round, string(body))

	var txResponse struct {
		Transactions []model.AlgorandTransactionVan `json:"transactions"`
	}
	if err := json.Unmarshal(body, &txResponse); err != nil {
		return nil, fmt.Errorf("error parsing transactions JSON: %v", err)
	}

	return txResponse.Transactions, nil
}

// X·ª≠ l√Ω m·ªôt block Algorand v√† xu·∫•t JSON theo ƒë·ªãnh d·∫°ng mong mu·ªën
func processAlgorandBlock(round int64, apiURL, indexerURL, chainName string) error {
	model.LogMutexVan.Lock()
	log.Printf("üîç Fetching block info: %d", round)
	model.LogMutexVan.Unlock()

	block, err := getAlgorandBlock(round, apiURL)
	if err != nil {
		model.LogMutexVan.Lock()
		log.Printf("‚ùå Error fetching block %d: %v", round, err)
		model.LogMutexVan.Unlock()
		return err
	}

	model.LogMutexVan.Lock()
	log.Printf("‚úÖ Fetched block: %d", round)
	model.LogMutexVan.Unlock()

	// L·∫•y giao d·ªãch t·ª´ block b·∫±ng Indexer API
	transactions, err := getAlgorandTransactions(round, indexerURL)
	if err != nil {
		model.LogMutexVan.Lock()
		log.Printf("‚ùå Error fetching transactions for block %d: %v", round, err)
		model.LogMutexVan.Unlock()
		return err
	}

	// T·∫°o m·∫£ng JSON cho c√°c giao d·ªãch
	var txRecords []map[string]interface{}
	for _, tx := range transactions {
		txHash := tx.ID
		blockTime := time.Unix(block.Timestamp, 0).UTC()

		var receiver string
		var amount int64
		var token string = "ALGO" // Token m·∫∑c ƒë·ªãnh

		// X·ª≠ l√Ω d·ª±a tr√™n lo·∫°i giao d·ªãch
		switch tx.Type {
		case "pay": // Payment transaction
			if tx.PaymentTransaction != nil {
				receiver = tx.PaymentTransaction.Receiver
				amount = tx.PaymentTransaction.Amount
			}
		case "axfer": // Asset transfer transaction
			if tx.AssetTransferTransaction != nil {
				receiver = tx.AssetTransferTransaction.Receiver
				amount = tx.AssetTransferTransaction.Amount
				token = fmt.Sprintf("ASA-%d", tx.AssetTransferTransaction.AssetID) // Token l√† Asset ID
			}
		default:
			// B·ªè qua c√°c lo·∫°i giao d·ªãch kh√°c n·∫øu kh√¥ng c·∫ßn x·ª≠ l√Ω
			continue
		}

		// N·∫øu kh√¥ng c√≥ receiver ho·∫∑c amount h·ª£p l·ªá, b·ªè qua giao d·ªãch n√†y
		if receiver == "" {
			continue
		}

		if txHash == "" {
			txHash = fmt.Sprintf("%x", sha256.Sum256([]byte(tx.Sender+receiver+fmt.Sprintf("%d", amount))))
		}

		// T·∫°o b·∫£n ghi giao d·ªãch theo ƒë·ªãnh d·∫°ng mong mu·ªën
		record := map[string]interface{}{
			"block_height": fmt.Sprintf("%d", block.Round),
			"block_hash":   block.Hash,
			"block_time":   blockTime.Format(time.RFC3339),
			"chain_id":     "algorand-mainnet", // C√≥ th·ªÉ thay ƒë·ªïi t√πy theo c·∫•u h√¨nh
			"tx_hash":      txHash,
			"from":         tx.Sender,
			"to":           receiver,
			"amount":       fmt.Sprintf("%d", amount),
			"token":        token,
			"total_amount": fmt.Sprintf("%d", amount), // Gi·∫£ ƒë·ªãnh total_amount = amount
			"tx_type":      tx.Type,
			"timestamp":    blockTime.Format(time.RFC3339),
		}
		txRecords = append(txRecords, record)
	}

	// Ghi JSON v√†o log theo t·ª´ng giao d·ªãch
	model.LogMutexVan.Lock()
	if len(txRecords) == 0 {
		log.Printf("Block #%d has no transactions", round)
	} else {
		for _, txRecord := range txRecords {
			txJSON, _ := json.MarshalIndent(txRecord, "", "  ")
			log.Printf("GIAO D·ªäCH TRONG BLOCK #%d:\n%s", round, string(txJSON))
		}
	}
	model.LogMutexVan.Unlock()

	model.LogMutexVan.Lock()
	log.Printf("‚úÖ Completed processing block %d", round)
	model.LogMutexVan.Unlock()
	return nil
}

// Qu√©t t·ª´ block hi·ªán t·∫°i l√πi v·ªÅ qu√° kh·ª©
func scanBackwardsFromCurrentBlock(chainName string, blocksToScan int, apiURL string, indexerURL string) {
	// L·∫•y th√¥ng tin v·ªÅ block hi·ªán t·∫°i
	url := fmt.Sprintf("%s/v2/status", apiURL)
	log.Printf("Fetching current block from: %s", url)
	resp, err := http.Get(url)
	if err != nil {
		log.Fatalf("Error fetching chain status: %v", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatalf("Error reading response: %v", err)
	}

	var status struct {
		LastRound int64 `json:"last-round"`
	}
	if err := json.Unmarshal(body, &status); err != nil {
		log.Fatalf("Error parsing JSON: %v", err)
	}

	currentBlock := status.LastRound
	log.Printf("Current block is: %d", currentBlock)

	// X√°c ƒë·ªãnh block b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
	startBlock := currentBlock
	endBlock := currentBlock - int64(blocksToScan)
	if endBlock < 1 {
		endBlock = 1 // Kh√¥ng qu√©t d∆∞·ªõi block 1
	}

	log.Printf("Starting backward scan from block %d to block %d", startBlock, endBlock)

	// Qu√©t l√πi t·ª´ block hi·ªán t·∫°i
	for blockNum := startBlock; blockNum >= endBlock; blockNum-- {
		log.Printf("Processing block %d", blockNum)
		err := processAlgorandBlock(blockNum, apiURL, indexerURL, chainName)
		if err != nil {
			log.Printf("Error processing block %d: %v, retrying...", blockNum, err)
			// Th·ª≠ l·∫°i sau 1 gi√¢y
			time.Sleep(1 * time.Second)
			err = processAlgorandBlock(blockNum, apiURL, indexerURL, chainName)
			if err != nil {
				log.Printf("Failed to process block %d after retry: %v, skipping", blockNum, err)
				continue
			}
		}

		// T·∫°m d·ª´ng gi·ªØa c√°c l·∫ßn x·ª≠ l√Ω block ƒë·ªÉ tr√°nh qu√° t·∫£i API
		time.Sleep(200 * time.Millisecond)
	}

	log.Printf("Completed backward scan from block %d to block %d", startBlock, endBlock)
}

// H√†m ch√≠nh x·ª≠ l√Ω Algorand qua HTTP
func Handle_algorand_http() {
	chainName := "algorand"
	apiURL := "https://mainnet-api.algonode.cloud"
	indexerURL := "https://mainnet-idx.algonode.cloud"
	blocksToScan := 1000 // S·ªë block c·∫ßn qu√©t l√πi

	// T·∫°o th∆∞ m·ª•c log n·∫øu ch∆∞a t·ªìn t·∫°i
	if _, err := os.Stat("./log"); os.IsNotExist(err) {
		os.Mkdir("./log", 0755)
	}

	// M·ªü file log
	logFile, err := os.OpenFile("./services/get_chains/log/algorand_http.log", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0666)
	if err != nil {
		log.Fatalf("Cannot open log file: %v", err)
	}
	defer logFile.Close()

	log.SetOutput(logFile)

	// Kh·ªüi t·∫°o d·ªØ li·ªáu cho chain
	_ = InitAlgorandChainData(chainName)
	log.Printf("Initialized data for chain %s", chainName)

	// T·∫£i c·∫•u h√¨nh n·∫øu c·∫ßn
	if err := configs.LoadConfig("./configs/config-algorand.json", chainName); err != nil {
		log.Printf("Warning: Cannot load config: %v, using default settings", err)
	}

	// Ghi log b·∫Øt ƒë·∫ßu qu√° tr√¨nh
	log.Printf("======= B·∫ÆT ƒê·∫¶U QU√âT NG∆Ø·ª¢C BLOCKCHAIN ALGORAND %s =======", chainName)
	log.Printf("S·∫Ω qu√©t l√πi %d blocks t·ª´ block hi·ªán t·∫°i", blocksToScan)
	log.Printf("API URL: %s", apiURL)
	log.Printf("Indexer URL: %s", indexerURL)
	log.Printf("==================================")

	// B·∫Øt ƒë·∫ßu qu√©t l√πi t·ª´ block hi·ªán t·∫°i
	scanBackwardsFromCurrentBlock(chainName, blocksToScan, apiURL, indexerURL)

	// Ghi log k·∫øt th√∫c qu√° tr√¨nh
	log.Printf("======= HO√ÄN TH√ÄNH QU√âT NG∆Ø·ª¢C BLOCKCHAIN ALGORAND %s =======", chainName)
	log.Printf("ƒê√£ qu√©t l√πi %d blocks t·ª´ block hi·ªán t·∫°i", blocksToScan)
	log.Printf("==================================")
}

// H√†m theo d√µi c√°c block m·ªõi (c√≥ th·ªÉ th√™m v√†o sau khi qu√©t l√πi ho√†n t·∫•t)
func monitorNewBlocks(chainName string, apiURL string, indexerURL string) {
	log.Printf("B·∫Øt ƒë·∫ßu theo d√µi c√°c block m·ªõi tr√™n blockchain Algorand")

	// L·∫•y th√¥ng tin v·ªÅ block hi·ªán t·∫°i
	url := fmt.Sprintf("%s/v2/status", apiURL)
	resp, err := http.Get(url)
	if err != nil {
		log.Fatalf("Error fetching chain status: %v", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatalf("Error reading response: %v", err)
	}
	log.Printf("API response: %s", string(body))

	var status struct {
		LastRound int64 `json:"last-round"`
	}
	if err := json.Unmarshal(body, &status); err != nil {
		log.Fatalf("Error parsing JSON: %v", err)
	}

	currentBlock := status.LastRound
	log.Printf("B·∫Øt ƒë·∫ßu theo d√µi t·ª´ block: %d", currentBlock)

	// Theo d√µi li√™n t·ª•c c√°c block m·ªõi
	for {
		// Ki·ªÉm tra block m·ªõi nh·∫•t
		resp, err := http.Get(url)
		if err != nil {
			log.Printf("Error fetching chain status: %v, retrying...", err)
			time.Sleep(5 * time.Second)
			continue
		}

		body, err := io.ReadAll(resp.Body)
		resp.Body.Close()
		if err != nil {
			log.Printf("Error reading response: %v, retrying...", err)
			time.Sleep(5 * time.Second)
			continue
		}

		var newStatus struct {
			LastRound int64 `json:"last-round"`
		}
		if err := json.Unmarshal(body, &newStatus); err != nil {
			log.Printf("Error parsing JSON: %v, retrying...", err)
			time.Sleep(5 * time.Second)
			continue
		}

		// N·∫øu c√≥ block m·ªõi
		if newStatus.LastRound > currentBlock {
			log.Printf("Ph√°t hi·ªán block m·ªõi: %d (tr∆∞·ªõc ƒë√≥: %d)", newStatus.LastRound, currentBlock)

			// X·ª≠ l√Ω c√°c block m·ªõi
			for blockNum := currentBlock + 1; blockNum <= newStatus.LastRound; blockNum++ {
				log.Printf("X·ª≠ l√Ω block m·ªõi: %d", blockNum)
				err := processAlgorandBlock(blockNum, apiURL, indexerURL, chainName)
				if err != nil {
					log.Printf("L·ªói khi x·ª≠ l√Ω block %d: %v, th·ª≠ l·∫°i...", blockNum, err)
					// Th·ª≠ l·∫°i sau 1 gi√¢y
					time.Sleep(1 * time.Second)
					err = processAlgorandBlock(blockNum, apiURL, indexerURL, chainName)
					if err != nil {
						log.Printf("Kh√¥ng th·ªÉ x·ª≠ l√Ω block %d sau khi th·ª≠ l·∫°i: %v, b·ªè qua", blockNum, err)
						continue
					}
				}

				// C·∫≠p nh·∫≠t block hi·ªán t·∫°i
				currentBlock = blockNum

				// T·∫°m d·ª´ng gi·ªØa c√°c l·∫ßn x·ª≠ l√Ω block ƒë·ªÉ tr√°nh qu√° t·∫£i API
				time.Sleep(200 * time.Millisecond)
			}
		}

		// ƒê·ª£i m·ªôt kho·∫£ng th·ªùi gian tr∆∞·ªõc khi ki·ªÉm tra l·∫°i
		time.Sleep(5 * time.Second)
	}
}

// H√†m ch√≠nh m·ªü r·ªông ƒë·ªÉ v·ª´a qu√©t l√πi v·ª´a theo d√µi block m·ªõi
func Handle_algorand_http_extended() {
	chainName := "algorand"
	apiURL := "https://mainnet-api.algonode.cloud"
	indexerURL := "https://mainnet-idx.algonode.cloud"
	blocksToScan := 1000 // S·ªë block c·∫ßn qu√©t l√πi

	// T·∫°o th∆∞ m·ª•c log n·∫øu ch∆∞a t·ªìn t·∫°i
	if _, err := os.Stat("./log"); os.IsNotExist(err) {
		os.Mkdir("./log", 0755)
	}

	// M·ªü file log
	logFile, err := os.OpenFile("./log/algorand_http.log", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0666)
	if err != nil {
		log.Fatalf("Cannot open log file: %v", err)
	}
	defer logFile.Close()

	log.SetOutput(logFile)

	// Kh·ªüi t·∫°o d·ªØ li·ªáu cho chain
	_ = InitAlgorandChainData(chainName)
	log.Printf("Initialized data for chain %s", chainName)

	// T·∫£i c·∫•u h√¨nh n·∫øu c·∫ßn
	if err := configs.LoadConfig("./configs/config-algorand.json", chainName); err != nil {
		log.Printf("Warning: Cannot load config: %v, using default settings", err)
	}

	// Ghi log b·∫Øt ƒë·∫ßu qu√° tr√¨nh
	log.Printf("======= B·∫ÆT ƒê·∫¶U X·ª¨ L√ù BLOCKCHAIN ALGORAND %s =======", chainName)
	log.Printf("B∆∞·ªõc 1: Qu√©t l√πi %d blocks t·ª´ block hi·ªán t·∫°i", blocksToScan)
	log.Printf("API URL: %s", apiURL)
	log.Printf("Indexer URL: %s", indexerURL)
	log.Printf("==================================")

	// B∆∞·ªõc 1: Qu√©t l√πi t·ª´ block hi·ªán t·∫°i
	scanBackwardsFromCurrentBlock(chainName, blocksToScan, apiURL, indexerURL)

	log.Printf("B∆∞·ªõc 2: B·∫Øt ƒë·∫ßu theo d√µi c√°c block m·ªõi")

	// B∆∞·ªõc 2: Theo d√µi c√°c block m·ªõi
	monitorNewBlocks(chainName, apiURL, indexerURL)
}
